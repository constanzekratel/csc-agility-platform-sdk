<!DOCTYPE html>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" lang="en-us" xml:lang="en-us" data-mc-search-type="Stem" data-mc-help-system-file-name="AgilityServicesSDK.xml" data-mc-path-to-help-system="../../" data-mc-target-type="WebHelp2" data-mc-runtime-file-type="Topic" data-mc-preload-images="false" data-mc-in-preview-mode="false" data-mc-medium="non-print" data-mc-toc-path="Service Framework Overview|Asysnchronous Results" data-mc-ignored-words="https;DNS;API;s;Inbox;blog;Flatpress;CentOS;jsp;Wilshire;DFARS;DFAR;classpath;webapp;JavaScript;mozilla;SSH;HIDS;RDP;MySQL;IIS;SDLC;LDAP;DCHP;OSSec;IaaS;PaaS;SaaS;servicemesh;VMpackage;minPort;maxPort;VMPolicy;VMContainer;VMProject;VMEnvironment;Var;Envn;foreach;indexVarName;getVar;Eval;ignoreCase;Nemo;nemo;cpu_count;includeSelf;cpu_speed;disksize;setVar;instanceCount;maxThreads;maxProc;requiresPassport;Oper;existsVar;AccessControl;ProvisioningConstraint;Socks5;NX;TimeRange;VMScript;6u21;6u24;PortMapper;Syslog;Mountd;util;tstamp;AssetType;event0;event1;assetPath;assetType;VSYS" data-mc-condition-tag-expression="">
    <!-- saved from url=(0016)http://localhost -->
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=edge" />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" /><title>promise.sequence</title>
        <link href="../../Skins/Default/Stylesheets/Slideshow.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/TextEffects.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Topic.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Styles.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Tablet.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../../Skins/Default/Stylesheets/Components/Mobile.css" rel="stylesheet" data-mc-generated="True" />
        <link href="../Resources/Stylesheets/NoIndents.css" rel="stylesheet" />
        <script src="../../Resources/Scripts/custom.modernizr.js">
        </script>
        <script src="../../Resources/Scripts/jquery.min.js">
        </script>
        <script src="../../Resources/Scripts/require.min.js">
        </script>
        <script src="../../Resources/Scripts/require.config.js">
        </script>
        <script src="../../Resources/Scripts/foundation.min.js">
        </script>
        <script src="../../Resources/Scripts/plugins.min.js">
        </script>
        <script src="../../Resources/Scripts/MadCapAll.js">
        </script>
    </head>
    <body>
        <div class="MCBreadcrumbsBox_0"><span class="MCBreadcrumbsPrefix">  <![CDATA[ ]]></span><a class="MCBreadcrumbsLink" href="AboutServiceSDK.htm">Service Framework Overview</a><span class="MCBreadcrumbsDivider"> &gt; </span><a class="MCBreadcrumbsLink" href="ServiceSDK_sdkframework.htm">Asysnchronous Results</a><span class="MCBreadcrumbsDivider"> &gt; </span><span class="MCBreadcrumbs">Sequence</span>
        </div>
        <h3>promise.sequence</h3>
        <p class="Body">Another typical use cases involves the service adapter initiating multiple asynchronous requests/calls and waiting for all of these to complete in order to accumulate a result. The <span class="Code">promise.sequence</span> method converts a list of promises to a single promise that completes with a list of results. This promise can then be combined with <span class="Code">promise.map</span> to process the results.</p>
        <p class="Body">The following example represents an IPAM network service adapter with code removed to simplify: </p>
        <div class="CodeSample">
            <p class="Code">@Override</p>
            <p class="CodeIndent">public Promise&lt;InstanceResponse&gt; preBoot(InstancePreBootRequest request)</p>
            <p class="CodeIndent">{</p>
            <p class="CodeIndent2">... // code removed</p>
            <p class="Code">&#160;</p>
            <p class="CodeIndent2">// client wrapper around an async service provider</p>
            <p class="CodeIndent2">AddressProvider ipam = new AddressProvider(addressBinding,addressProvider,service);</p>
            <p class="CodeIndent2">List&lt;Promise&lt;NetworkInterface&gt;&gt; promises = new ArrayList&lt;Promise&lt;NetworkInterface&gt;&gt;();</p>
            <p class="CodeIndent2">for(Resource resource : instance.getResources())</p>
            <p class="CodeIndent2">{</p>
            <p class="CodeIndent3">if(resource instanceof NetworkInterface)</p>
            <p class="CodeIndent3">{</p>
            <p class="CodeIndent4">NetworkInterface nic = (NetworkInterface)resource;</p>
            <p class="CodeIndent4">Network network = nic.getNetwork();</p>
            <p class="CodeIndent4">Address address = nic.getAddress();</p>
            <p class="CodeIndent4">// attempt to reserve address</p>
            <p class="CodeIndent4">if(address != null)</p>
            <p class="CodeIndent4">{</p>
            <p class="CodeIndent5">Promise&lt;NetworkInterface&gt; promise = ipam.reserveAddress(instance,nic,network,address);</p>
            <p class="CodeIndent5">promises.add(promise);</p>
            <p class="CodeIndent4">}</p>
            <p class="CodeIndent4">// otherwise allocate an address</p>
            <p class="CodeIndent4">else if (network != null)</p>
            <p class="CodeIndent4">{</p>
            <p class="CodeIndent5">Promise&lt;NetworkInterface&gt; promise = ipam.allocateAddress(instance,nic,network);</p>
            <p class="CodeIndent5">promises.add(promise);</p>
            <p class="CodeIndent4">}</p>
            <p class="CodeIndent3">}</p>
            <p class="CodeIndent2">}</p>
            <p class="Code">&#160;</p>
            <p class="CodeIndent2">// wait from completion of all requests</p>
            <p class="CodeIndent2">Promise&lt;List&lt;NetworkInterface&gt;&gt; promise = Promise.sequence(promises);</p>
            <p class="CodeIndent2">return promise.map(new Function&lt;List&lt;NetworkInterface&gt;,InstanceResponse&gt;() {</p>
            <p class="Code">&#160;</p>
            <p class="CodeIndent3">@Override</p>
            <p class="CodeIndent3">public InstanceResponse invoke(List&lt;NetworkInterface&gt; nics)</p>
            <p class="CodeIndent3">{</p>
            <p class="CodeIndent4">// update instance with updated nic(s)</p>
            <p class="CodeIndent4">InstanceResponse response = new InstanceResponse();</p>
            <p class="Code">&#160;</p>
            <p class="CodeIndent4">... // code removed - do something with the nics</p>
            <p class="Code">&#160;</p>
            <p class="CodeIndent4">response.setComplete(Status.COMPLETE);</p>
            <p class="CodeIndent4">return response;</p>
            <p class="CodeIndent3">}</p>
            <p class="Code">&#160;</p>
            <p class="CodeIndent2">});</p>
            <p class="CodeIndent">}</p>
        </div>
        <p class="copyright">Copyright Â© &#160;2008-<span class="AgilityDocsYear">2018</span> Computer Sciences Corporation, Inc. &#160;All rights reserved.</p>
        <p class="Anchor">&#160;</p>
    </body>
</html>